name: PR Preview

on:
  pull_request:
    paths:
      - 'events.csv'
      - '.github/workflows/pr_preview.yml'
      - 'events_listing/**'

permissions:
  contents: read
  pull-requests: write
  packages: read

jobs:
  build-and-screenshot:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Server jekyll
        run: docker compose run -e JEKYLL_ENV=production app jekyll build --source /app/events_listing --destination /app/_site
        env:
          COMPOSE_FILE: docker-compose.ci.yml

      # Setup a web server to serve the built site
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install http-server
        run: npm install -g http-server

      # Install Playwright
      - name: Install Playwright
        run: |
          npm init -y
          npm install playwright
          npx playwright install chromium

      # Start the server in background
      - name: Start http-server
        run: http-server _site -p 8080 &

      # Wait for server to start
      - name: Wait for server
        run: sleep 5

      # Take screenshots
      - name: Create screenshots directory
        run: mkdir -p screenshots

      - name: Take screenshots
        run: |
          cat > screenshot.js << 'EOF'
          const { chromium } = require('playwright');

          (async () => {
            const browser = await chromium.launch();
            const context = await browser.newContext({
              viewport: { width: 1280, height: 800 }
            });

            // Screenshot homepage
            const homePage = await context.newPage();
            await homePage.goto('http://localhost:8080/');
            await homePage.waitForLoadState('networkidle');
            await homePage.screenshot({ path: 'screenshots/homepage.png', fullPage: true });

            // Get a sample event page URL
            const eventLinks = await homePage.$$eval('a[href^="/events/"]', links =>
              links.slice(0, 1).map(link => link.href)
            );

            if (eventLinks.length > 0) {
              // Screenshot sample event page
              const eventPage = await context.newPage();
              await eventPage.goto(eventLinks[0]);
              await eventPage.waitForLoadState('networkidle');
              await eventPage.screenshot({ path: 'screenshots/event.png', fullPage: true });
            }

            await browser.close();
            console.log('Screenshots taken successfully');
          })();
          EOF

          node screenshot.js

      # Post screenshots directly as PR comments
      - name: Post screenshots as PR comments
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');

            // Create a gist with the screenshot
            async function createGistWithImage(filename, filepath) {
              try {
                // Read image file
                const content = fs.readFileSync(filepath);
                const base64Content = Buffer.from(content).toString('base64');

                // Create a unique name with timestamp to avoid conflicts
                const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
                const gistFilename = `${filename.split('.')[0]}-${timestamp}.png`;

                // Create gist with the screenshot
                const response = await github.rest.gists.create({
                  files: {
                    [gistFilename]: {
                      content: base64Content
                    }
                  },
                  public: true,
                  description: `PR #${context.issue.number} Preview - ${gistFilename}`
                });

                // Get the raw URL to the file in the gist
                const fileKey = Object.keys(response.data.files)[0];
                return response.data.files[fileKey].raw_url;
              } catch (error) {
                console.error(`Error creating gist for ${filename}:`, error);
                return null;
              }
            }

            // Post screenshots as a comment
            async function postScreenshotComment() {
              try {
                console.log('Checking for screenshots...');
                const files = [];

                // Check if files exist and upload to gists
                if (fs.existsSync('screenshots/homepage.png')) {
                  console.log('Homepage screenshot found, uploading...');
                  const homepageUrl = await createGistWithImage('homepage.png', 'screenshots/homepage.png');
                  if (homepageUrl) {
                    files.push({ name: 'Homepage', url: homepageUrl });
                  }
                }

                if (fs.existsSync('screenshots/event.png')) {
                  console.log('Event page screenshot found, uploading...');
                  const eventUrl = await createGistWithImage('event.png', 'screenshots/event.png');
                  if (eventUrl) {
                    files.push({ name: 'Sample Event Page', url: eventUrl });
                  }
                }

                // Create comment text
                let commentBody = `## üì∏ PR Preview Screenshots\n\n`;
                commentBody += `*Screenshots taken at ${new Date().toUTCString()}*\n\n`;

                if (files.length === 0) {
                  commentBody += '‚ö†Ô∏è No screenshots were successfully captured.';
                } else {
                  // Add each screenshot to the comment
                  for (const file of files) {
                    commentBody += `### ${file.name}\n`;
                    commentBody += `![${file.name} Screenshot](${file.url})\n\n`;
                  }
                }

                // Post the comment
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: context.issue.number,
                  body: commentBody
                });

                console.log('PR comment with screenshots posted successfully');
              } catch (error) {
                console.error('Error posting PR comment:', error);
                core.setFailed('Failed to post screenshots as PR comment');
              }
            }

            // Execute the main function
            await postScreenshotComment();
