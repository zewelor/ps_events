name: PR Visual Preview

on:
  pull_request:
    types: [opened, synchronize]
    paths:
      - 'events_listing/**'
      - 'events.csv'
      - '.github/workflows/pr_visual_preview.yml'

permissions:
  contents: read
  pages: write
  id-token: write
  packages: read
  pull-requests: write

jobs:
  visual-preview:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout PR
        uses: actions/checkout@v4

      - name: Set up Docker
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Jekyll site (PR version)
        run: |
          docker compose run -e JEKYLL_ENV=production app jekyll build --source /app/events_listing --destination /app/_site
        env:
          COMPOSE_FILE: docker-compose.ci.yml

      - name: Serve Jekyll site
        run: |
          docker compose run -d -p 4000:4000 app jekyll serve --host 0.0.0.0 --source /app/events_listing --destination /app/_site --no-watch &
          sleep 10
        env:
          COMPOSE_FILE: docker-compose.ci.yml

      - name: Install Playwright
        run: |
          npm install -g playwright
          npx playwright install chromium

      - name: Take screenshots
        run: |
          mkdir -p screenshots
          
          # Take screenshot of homepage
          npx playwright screenshot --wait-for-selector='body' --viewport-size=1280,720 http://localhost:4000 screenshots/homepage-desktop.png
          npx playwright screenshot --wait-for-selector='body' --viewport-size=375,667 http://localhost:4000 screenshots/homepage-mobile.png
          
          # Try to take screenshot of events page if it exists
          if curl -s -o /dev/null -w "%{http_code}" http://localhost:4000/events | grep -q "200"; then
            npx playwright screenshot --wait-for-selector='body' --viewport-size=1280,720 http://localhost:4000/events screenshots/events-desktop.png
            npx playwright screenshot --wait-for-selector='body' --viewport-size=375,667 http://localhost:4000/events screenshots/events-mobile.png
          fi
          
          # List all available pages and take screenshots of up to 3 more pages
          pages=$(curl -s http://localhost:4000/sitemap.xml | grep -oP '(?<=<loc>)[^<]*' | head -5 | tail -3 || echo "")
          for page in $pages; do
            if [[ "$page" != *"localhost:4000"* ]]; then
              page="http://localhost:4000${page#http://localhost:4000}"
            fi
            filename=$(echo "$page" | sed 's|http://localhost:4000||g' | sed 's|/||g' | sed 's|^$|homepage|g')
            if [[ "$filename" != "homepage" ]] && [[ "$filename" != "events" ]]; then
              npx playwright screenshot --wait-for-selector='body' --viewport-size=1280,720 "$page" "screenshots/${filename}-desktop.png" 2>/dev/null || true
            fi
          done

      - name: Upload screenshots as artifacts
        uses: actions/upload-artifact@v4
        with:
          name: pr-screenshots
          path: screenshots/
          retention-days: 30

      - name: Checkout main branch for comparison
        uses: actions/checkout@v4
        with:
          ref: main
          path: main-branch

      - name: Build Jekyll site (main version)
        run: |
          cd main-branch
          docker compose run -e JEKYLL_ENV=production app jekyll build --source /app/events_listing --destination /app/_site_main
        env:
          COMPOSE_FILE: docker-compose.ci.yml

      - name: Serve main Jekyll site
        run: |
          cd main-branch
          docker compose run -d -p 4001:4000 app jekyll serve --host 0.0.0.0 --port 4000 --source /app/events_listing --destination /app/_site_main --no-watch &
          sleep 10
        env:
          COMPOSE_FILE: docker-compose.ci.yml

      - name: Take main branch screenshots
        run: |
          mkdir -p screenshots-main
          
          # Take screenshot of main homepage
          npx playwright screenshot --wait-for-selector='body' --viewport-size=1280,720 http://localhost:4001 screenshots-main/homepage-desktop.png
          npx playwright screenshot --wait-for-selector='body' --viewport-size=375,667 http://localhost:4001 screenshots-main/homepage-mobile.png
          
          # Try to take screenshot of main events page if it exists
          if curl -s -o /dev/null -w "%{http_code}" http://localhost:4001/events | grep -q "200"; then
            npx playwright screenshot --wait-for-selector='body' --viewport-size=1280,720 http://localhost:4001/events screenshots-main/events-desktop.png
            npx playwright screenshot --wait-for-selector='body' --viewport-size=375,667 http://localhost:4001/events screenshots-main/events-mobile.png
          fi

      - name: Create comparison comment
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            
            // Function to upload image and get URL
            async function uploadImage(imagePath, filename) {
              try {
                const imageBuffer = fs.readFileSync(imagePath);
                const base64Image = imageBuffer.toString('base64');
                
                // Create a gist with the image
                const gist = await github.rest.gists.create({
                  description: `Screenshot for PR #${{ github.event.number }} - ${filename}`,
                  public: false,
                  files: {
                    [filename]: {
                      content: base64Image
                    }
                  }
                });
                
                return `https://gist.githubusercontent.com/${gist.data.owner.login}/${gist.data.id}/raw/${filename}`;
              } catch (error) {
                console.log(`Failed to upload ${filename}:`, error);
                return null;
              }
            }
            
            let comment = "## üì∏ Visual Preview\n\n";
            comment += "Here's how your changes look:\n\n";
            
            const screenshotDir = 'screenshots';
            const mainScreenshotDir = 'screenshots-main';
            
            try {
              const screenshots = fs.readdirSync(screenshotDir);
              
              for (const screenshot of screenshots) {
                const prPath = path.join(screenshotDir, screenshot);
                const mainPath = path.join(mainScreenshotDir, screenshot);
                
                if (fs.existsSync(prPath)) {
                  const pageName = screenshot.replace(/-(desktop|mobile)\.png$/, '');
                  const device = screenshot.includes('desktop') ? 'Desktop' : 'Mobile';
                  
                  comment += `### ${pageName.charAt(0).toUpperCase() + pageName.slice(1)} - ${device}\n\n`;
                  
                  // Add PR screenshot
                  const prImageBuffer = fs.readFileSync(prPath);
                  const prBase64 = prImageBuffer.toString('base64');
                  comment += `**After (PR):**\n`;
                  comment += `![${screenshot}](data:image/png;base64,${prBase64})\n\n`;
                  
                  // Add main screenshot if exists
                  if (fs.existsSync(mainPath)) {
                    const mainImageBuffer = fs.readFileSync(mainPath);
                    const mainBase64 = mainImageBuffer.toString('base64');
                    comment += `**Before (main):**\n`;
                    comment += `![main-${screenshot}](data:image/png;base64,${mainBase64})\n\n`;
                  }
                  
                  comment += "---\n\n";
                }
              }
              
              comment += "\n*Screenshots are automatically generated for visual review. They show the current state of your PR compared to the main branch.*";
              
            } catch (error) {
              comment += "‚ùå Failed to generate screenshots. Please check the workflow logs.";
              console.error('Error processing screenshots:', error);
            }
            
            // Post comment
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

