name: PR Preview

on:
  pull_request:
    paths:
      - 'events.csv'
      - '.github/workflows/pr_preview.yml'
      - 'events_listing/**'

permissions:
  contents: write
  pull-requests: write
  packages: read

jobs:
  build-and-screenshot:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Server jekyll
        run: docker compose run -e JEKYLL_ENV=production app jekyll build --source /app/events_listing --destination /app/_site
        env:
          COMPOSE_FILE: docker-compose.ci.yml

      # Setup a web server to serve the built site
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install http-server
        run: npm install -g http-server

      # Install Playwright
      - name: Install Playwright
        run: |
          npm init -y
          npm install playwright
          npx playwright install chromium

      # Start the server in background
      - name: Start http-server
        run: http-server _site -p 8080 &

      # Wait for server to start
      - name: Wait for server
        run: sleep 5

      # Take screenshots
      - name: Create screenshots directory
        run: mkdir -p screenshots

      # Take screenshot of homepage and post to PR
      - uses: flameddd/screenshots-ci-action@v1.1.2
        with:
          url: http://localhost:8080/
          width: 1280
          height: 800
          fullPage: true
          disableAnimation: true
          waitForSelector: "body"
          output: './screenshots/homepage.png'

      # Find a sample event page
      - name: Find sample event URL
        id: find-sample-event
        run: |
          # Use grep to find the first event link in the HTML
          EVENT_PATH=$(grep -o -m 1 'href="/events/[^"]*"' _site/index.html | cut -d'"' -f2)
          if [ -n "$EVENT_PATH" ]; then
            echo "EVENT_PATH=$EVENT_PATH" >> $GITHUB_OUTPUT
            echo "Found event path: $EVENT_PATH"
          else
            echo "No event paths found"
            echo "EVENT_PATH=" >> $GITHUB_OUTPUT
          fi

      # Take screenshot of sample event page if found
      - uses: flameddd/screenshots-ci-action@master
        if: ${{ steps.find-sample-event.outputs.EVENT_PATH != '' }}
        with:
          url: http://localhost:8080${{ steps.find-sample-event.outputs.EVENT_PATH }}
          width: 1280
          height: 800
          fullPage: true
          disableAnimation: true
          waitForSelector: "body"
          output: './screenshots/event.png'

      # Post screenshots to PR comment
      - name: Post screenshots to PR
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');

            async function postScreenshotsComment() {
              let commentBody = `## üì∏ PR Preview Screenshots\n\n`;
              commentBody += `*Screenshots taken at ${new Date().toUTCString()}*\n\n`;

              // Add homepage screenshot to comment
              if (fs.existsSync('screenshots/homepage.png')) {
                commentBody += `### Homepage\n`;
                commentBody += `<details><summary>Click to view screenshot</summary>\n\n`;

                // Use github API to upload the image as an asset
                const homepageBuffer = fs.readFileSync('screenshots/homepage.png');

                const { data: homepageAsset } = await github.rest.repos.createOrUpdateFileContents({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  path: `pr-screenshots/${context.issue.number}/homepage-${Date.now()}.png`,
                  message: `Add homepage screenshot for PR #${context.issue.number}`,
                  content: Buffer.from(homepageBuffer).toString('base64'),
                  branch: `pr-screenshots-${context.issue.number}`
                }).catch(async err => {
                  if (err.status === 422) {
                    // Branch doesn't exist, create it
                    const { data: { object: { sha } } } = await github.rest.git.getRef({
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      ref: 'heads/main'
                    });

                    await github.rest.git.createRef({
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      ref: `refs/heads/pr-screenshots-${context.issue.number}`,
                      sha
                    });

                    // Try again with the new branch
                    return await github.rest.repos.createOrUpdateFileContents({
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      path: `pr-screenshots/${context.issue.number}/homepage-${Date.now()}.png`,
                      message: `Add homepage screenshot for PR #${context.issue.number}`,
                      content: Buffer.from(homepageBuffer).toString('base64'),
                      branch: `pr-screenshots-${context.issue.number}`
                    });
                  }
                  throw err;
                });

                const homepageUrl = `https://raw.githubusercontent.com/${context.repo.owner}/${context.repo.repo}/pr-screenshots-${context.issue.number}/pr-screenshots/${context.issue.number}/homepage-${Date.now()}.png`;
                commentBody += `![Homepage](${homepageUrl})\n`;
                commentBody += `</details>\n\n`;
              } else {
                commentBody += `### Homepage\n‚ö†Ô∏è Failed to capture homepage screenshot\n\n`;
              }

              // Add event screenshot to comment if it exists
              if (fs.existsSync('screenshots/event.png')) {
                commentBody += `### Sample Event Page\n`;
                commentBody += `<details><summary>Click to view screenshot</summary>\n\n`;

                // Use github API to upload the image as an asset
                const eventBuffer = fs.readFileSync('screenshots/event.png');

                const { data: eventAsset } = await github.rest.repos.createOrUpdateFileContents({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  path: `pr-screenshots/${context.issue.number}/event-${Date.now()}.png`,
                  message: `Add event screenshot for PR #${context.issue.number}`,
                  content: Buffer.from(eventBuffer).toString('base64'),
                  branch: `pr-screenshots-${context.issue.number}`
                });

                const eventUrl = `https://raw.githubusercontent.com/${context.repo.owner}/${context.repo.repo}/pr-screenshots-${context.issue.number}/pr-screenshots/${context.issue.number}/event-${Date.now()}.png`;
                commentBody += `![Event](${eventUrl})\n`;
                commentBody += `</details>\n\n`;
              } else {
                commentBody += `### Sample Event Page\n‚ö†Ô∏è Failed to capture event page screenshot or no events found\n\n`;
              }

              // Post comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: commentBody
              });
            }

            await postScreenshotsComment();
