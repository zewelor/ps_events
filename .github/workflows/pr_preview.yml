name: PR Preview

on:
  pull_request:
    paths:
      - 'events.csv'
      - '.github/workflows/pr_preview.yml'
      - 'events_listing/**'

permissions:
  contents: read
  pull-requests: write
  packages: read

jobs:
  build-and-screenshot:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Server jekyll
        run: docker compose run -e JEKYLL_ENV=production app jekyll build --source /app/events_listing --destination /app/_site
        env:
          COMPOSE_FILE: docker-compose.ci.yml

      # Setup a web server to serve the built site
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install http-server
        run: npm install -g http-server

      # Install Playwright
      - name: Install Playwright
        run: |
          npm init -y
          npm install playwright
          npx playwright install chromium

      # Start the server in background
      - name: Start http-server
        run: http-server _site -p 8080 &

      # Wait for server to start
      - name: Wait for server
        run: sleep 5

      # Take screenshots
      - name: Create screenshots directory
        run: mkdir -p screenshots

      - name: Take screenshots with Playwright
        run: |
          cat > screenshot.js << 'EOL'
          const { chromium } = require('playwright');

          (async () => {
            const browser = await chromium.launch();
            const context = await browser.newContext({
              viewport: { width: 1280, height: 720 }
            });

            // Homepage screenshot
            const homePage = await context.newPage();
            await homePage.goto('http://localhost:8080/');
            await homePage.waitForLoadState('networkidle');
            await homePage.screenshot({ path: 'screenshots/homepage.png', fullPage: true });

            // Events page screenshot (if it exists)
            try {
              const eventsPage = await context.newPage();
              await eventsPage.goto('http://localhost:8080/events/');
              await eventsPage.waitForLoadState('networkidle');
              await eventsPage.screenshot({ path: 'screenshots/events.png', fullPage: true });
            } catch (e) {
              console.log('Events page not found or error capturing screenshot');
            }

            // Add event page screenshot
            const addEventPage = await context.newPage();
            await addEventPage.goto('http://localhost:8080/add_event/');
            await addEventPage.waitForLoadState('networkidle');
            await addEventPage.screenshot({ path: 'screenshots/add_event.png', fullPage: true });

            await browser.close();
          })();
          EOL

          node screenshot.js

      # Post screenshots to PR comment
      - name: Comment PR with images
        uses: opengisch/comment-pr-with-images@upload_only
        with:
          images: "screenshots/*.png"
          upload_to: github_branch
          github_token: ${{ secrets.GITHUB_TOKEN }}
