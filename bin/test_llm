#!/usr/bin/env ruby
# frozen_string_literal: true

# filepath: /home/omen/personal/ps_events/bin/test_llm

require "bundler/setup"
require "ruby_llm"
require "pathname"
require_relative "../lib/server/event_validation"

# Configuration
RubyLLM.configure do |config|
  config.gemini_api_key = ENV.fetch("GEMINI_API_KEY", nil)
  # config.log_level = :debug  # Log level (:debug, :info, :warn)
end

# CLI argument validation
if ARGV.length != 1
  puts "Usage: #{$0} <image_path>"
  puts "Example: #{$0} ./my_image.jpg"
  exit 1
end

image_path = ARGV[0]

# Validate image file exists
unless File.exist?(image_path)
  puts "Error: Image file '#{image_path}' does not exist."
  exit 1
end

begin
  puts "Analyzing image: #{image_path}"
  puts

  # Create chat instance with the specified model
  chat = RubyLLM.chat(model: "gemini-2.5-flash-preview-05-20")
  chat.with_instructions("You are an expert in analyzing images and extracting information. Your task is to analyze the provided image and extract relevant text information in a structured format. You will be provided with an image containing text, and you should focus on extracting concise and accurate details from it. Current year is #{Time.now.year}. Return JSON with requested informations")

  # Ask about text in the image
  prompt = "Based on the photos, write concise information in European Portuguese (Portugal) about 4 events, in order. For each event, include:

- Event name
- Description
- Location
- Organizer
- Start date and time (assume current year)
  - use ISO 8601 format (YYYY-MM-DDTHH:MM:SS)
  - If the time is not mentioned, use '00:00:00'
  - assume event time zosne is Europe/Lisbon
- End date and time (assume current year)
  - use ISO 8601 format (YYYY-MM-DDTHH:MM:SS)
  - If the time is not mentioned, use '00:00:00'
  - assume event time zosne is Europe/Lisbon
- Category (#{EventValidation::VALID_CATEGORIES.join(", ")})
- Price type (#{EventValidation::VALID_PRICE_TYPES.join(", ")})
  - If the price is not mentioned, use 'Desconhecido'
  - If its more comples, like free till some hour, use 'Pago' and add a note in the description
"

  response = chat.ask(prompt, with: image_path)

  puts "Analysis result:"
  puts "=" * 50
  puts response.content
  puts "=" * 50
rescue => e
  puts "Error processing image: #{e.message}"
  puts "Error details: #{e.class}"

  if e.message.include?("API_KEY")
    puts
    puts "Make sure the GEMINI_API_KEY environment variable is set."
    puts "Export GEMINI_API_KEY=<your_api_key>"
  end

  exit 1
end
