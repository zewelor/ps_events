#!/usr/bin/env ruby
# frozen_string_literal: true

require "bundler/setup"
require "optionparser"
require "icalendar/tzinfo"
# require_relative "../lib/ps_events/generator"

Bundler.require(:default)

# https://github.com/fxn/zeitwerk#synopsis
loader = Zeitwerk::Loader.for_gem
loader.setup # ready!

class Generator
  DEFAULT_CSV_URL = "https://docs.google.com/spreadsheets/d/e/2PACX-1vTzDO4xR7fFMB53s98OETbwFNzhiMJ7N2I-kroaNQt4iB3mUthr7z1wGj3NhRXpVi8MQDzFKB0UjY9G/pub?gid=0&single=true&output=csv"
  CALENDAR_NAME = "PXOPulse"

  attr_reader :skipped, :tzid

  # Initialize with a URL or use the default
  # @param url [String] The URL to fetch the CSV from
  # @return [Generator] The generator instance

  def initialize(url: nil)
    @url = url || DEFAULT_CSV_URL
    @tzid = "Europe/Lisbon"
    @skipped = false
  end

  # Fetch CSV, parse events, and return an ICS string
  def generate
    events_from_csv.each do |row|
      ev = Icalendar::Event.new
      # parse and validate start/end times
      start_time = Time.parse(row.fetch("Start time"))
      end_time = Time.parse(row.fetch("End time"))
      event_name = row.fetch("Name").to_s.strip

      if end_time < start_time
        warn "Skipping event '#{event_name}' because end time #{end_time} is before start time #{start_time}"
        @skipped = true
        next
      end
      ev.dtstart = Icalendar::Values::DateTime.new(start_time, "tzid" => tzid)
      ev.dtend = Icalendar::Values::DateTime.new(end_time, "tzid" => tzid)
      ev.summary = event_name
      ev.location = row["Location"].to_s.strip unless row["Location"].to_s.strip.empty?
      ev.description = row["Description"].to_s.strip unless row["Description"].to_s.strip.empty?
      ev.organizer = row["Organizer"].to_s.strip unless row["Organizer"].to_s.strip.empty?

      calendar.add_event(ev)
    end

    calendar.publish
    calendar.to_ical
  end

  def events_from_csv
    response = HTTPX.plugin(:follow_redirects)
      .with(follow_insecure_redirects: false, max_redirects: 4)
      .get(@url)

    CSV.parse(response.to_s, headers: true)
  end

  def calendar
    return @calendar if defined?(@calendar)

    @calendar = Icalendar::Calendar.new
    @calendar.append_custom_property("X-WR-CALNAME", CALENDAR_NAME)
    @calendar.ip_name = CALENDAR_NAME
    @calendar.prodid = "-//PXO//#{CALENDAR_NAME}//EN"
    @calendar.append_custom_property("X-WR-TIMEZONE", tzid)
    timezone = TZInfo::Timezone.get(tzid).ical_timezone(Time.now)
    @calendar.add_timezone(timezone)
    @calendar
  end
end

options = {}
OptionParser.new do |opts|
  opts.banner = "Usage: spreadsheet_to_ical [options] [url]"
  opts.on("-oFILE", "--output=FILE", "Write output to FILE instead of stdout") do |file|
    options[:output] = file
  end
  opts.on("-h", "--help", "Show this help message") do
    puts opts
    exit
  end
end.parse!

generator = Generator.new(url: options[:url])
ics_content = generator.generate

if options[:output]
  File.write(options[:output], ics_content)
else
  puts ics_content
end

exit(1) if generator.skipped
